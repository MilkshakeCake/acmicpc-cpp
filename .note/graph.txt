// HOW TO NAVIGATE THRU GRAPHS W/ ALGORITHM

// BFS
struct Node {
    bool visit;
    vt<int> idx;
};

vt<Node> graph(N +1);

void bfs(int start) {
    queue<int> que;

    que.push(start);
    graph[start].visit = true;

    while(!que.empty()) {
        int now = que.top();
        que.pop();

        for(auto &i : graph[now].idx) {
            if(graph[i].visit) continue;
            que.push(i);
            graph[i].visit = true;
        }
    }
}

// DFS
struct Node {
    bool visit;
    vt<int> idx;
};

vt<Node> graph(N +1);

void dfs(int p) {
    if(graph[p].visit) return;

    graph[p].visit = true;

    for(auto &i : graph[p].idx) {
        if(graph[i].visit) continue;
        dfs(i);
    }
}

// DIJKSTRA
// all w >= 0

struct Node {
    ll w, idx;

    bool operator<(const Node &b) const {
        return w > b.w;
    }
};

int N, E;
vt<Node> graph[N +1];

ll dijkstra(int start, int end) {
    vt<ll> cache(N +1, INT32_MAX);
    cache[start] = 0;

    priority_queue<Node> pq;
    pq.push({0, start});

    while (!pq.empty()) {
        Node now = pq.top();
        pq.pop();
        
        if (now.w > cache[now.idx]) continue;

        for (const auto &next : graph[now.idx]) {
            if (next.w + now.w < cache[next.idx]) {
                cache[next.idx] = next.w + now.w;
                pq.push({cache[next.idx], next.idx});
            }
        }
    }
    return cache[end];
}

// BELLMAN-FORD

struct Edge {
    ll start, end, cost;
};

int N, M;
bool flag = false;
vt<Edge> graph;
vt<int> cache(N +1, INT32_MAX);

void BellmanFord(int begin) {
    cache[begin] = 0;

    // NAVIGATE ALL EDGES
    for (int i = 1; i <= N - 1; i++) {
        for (int j = 0; j < M; j++) {
            ll start = graph[j].start;
            ll end = graph[j].end;
            ll cost = graph[j].cost;
 
            if (cache[start] == INT32_MAX) continue;
            if (cache[end] > cache[start] + cost) cache[end] = cache[start] + cost;
        }
    }
 
    // NEGATIVE LOOP CHECK
    for (auto &i : graph) {
        int start = i.start;
        int end = i.end;
        int cost = i.cost;
 
        if (cache[start] == INT32_MAX) continue;
        if (cache[end] > cache[start] + cost) {
            flag = true;
        }
    }

    return;
}

// FLOYD-WARSHALL
for(int k = 1; k <= n; k++) {
    for(int i = 1; i <= n; i++) {
        if(i == k) matrix[i][k] = 0;
        for(int j = 1; j <= n; j++){
            matrix[i][j] = min(matrix[i][j], matrix[i][k] + matrix[k][j]);
        }
    }
}